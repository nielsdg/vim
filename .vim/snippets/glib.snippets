snippet show
	gtk_widget_show(${1});${2}
snippet hide
	gtk_widget_hide(${1});${2}
snippet W
	GtkWidget *
snippet signal
	g_signal_connect(${1}, "${2}",
	                 G_CALLBACK(${3}),
	                 ${4:NULL});${5}
snippet signals
	g_signal_connect_swapped(${1},
	                         "${2}",
	                         G_CALLBACK(${3}),
	                         ${4:NULL});${5}
# A ref-counted struct
snippet cref
	#include "${1:`HeaderName("$1")`}"

	struct _${2:`ClassName("$1")`}
	{
		volatile gint ref_count;${5}
	};

	static void
	$3_dispose ($2 *$4) /* IN */
	{
		ENTRY;
		EXIT;
	}

	/**
	 * $3_new:
	 *
	 * Creates a new instance of #$2.
	 *
	 * Returns: the newly created instance which should be freed with
	 *   $3_unref().
	 */
	$2*
	${3:`FuncPrefix("$1")`}_new (void)
	{
		$2 *${4:`InstanceName("$1")`};

		ENTRY;
		$4 = g_slice_new0($2);
		$4->ref_count = 1;
		RETURN($4);
	}

	/**
	 * $2_ref:
	 * @$4: A #$2.
	 *
	 * Atomically increments the reference count of @$4 by one.
	 *
	 * Returns: A reference to @$4.
	 */
	$2*
	$3_ref ($2 *$4) /* IN */
	{
		g_return_val_if_fail($4 != NULL, NULL);
		g_return_val_if_fail($4->ref_count > 0, NULL);

		ENTRY;
		g_atomic_int_inc(&$4->ref_count);
		RETURN($4);
	}

	/**
	 * $3_unref:
	 * @$4: A $2.
	 *
	 * Atomically decrements the reference count of @$4 by one.  When the
	 * reference count reaches zero, the structure will be destroyed and
	 * freed.
	 */
	void
	$3_unref ($2 *$4) /* IN */
	{
		g_return_if_fail($4 != NULL);
		g_return_if_fail($4->ref_count > 0);

		ENTRY;
		if (g_atomic_int_dec_and_test(&$4->ref_count)) {
			$3_dispose($4);
			g_slice_free($2, $4);
		}
		EXIT;
	}
# A ref-counted struct (header)
snippet href
	#ifndef $2_$3_H
	#define $2_$3_H

	#include <glib-object.h>

	G_BEGIN_DECLS

	#define ${2:`NS_NAME("$1")`}_TYPE_${3:`TYPE_NAME("$1")`} (${4:`FuncPrefix("$1")`}_get_type())

	typedef struct _$1 ${1:`ClassName("$1")`};

	GType $4_get_type (void) G_GNUC_CONST;
	$1* $4_new      (void);
	$1* $4_ref      ($1 *${5:`InstanceName("$1")`});
	void $4_unref    ($1 *$5);
	${6}

	G_END_DECLS

	#endif /* $2_$3_H */

snippet doc
	/**
	 * `FuncPrefix("$1")`_${1:func_name}:
	 * @self: a #`ClassName("$1")`
	 *
	 * ${4}
	 *
	 * Returns: ${2}
	 */${5}
snippet d
	* @${1:xxx}: (${2:in}): A #${3}
snippet gpl
	/* ${1:`expand('%:t')`}
	 *
	 * Copyright (C) ${2:`system('date +%Y')`} ${3:`system('git config user.name')`} <${4:`system('git config user.email')`}>
	 *
	 * This program is free software: you can redistribute it and/or modify
	 * it under the terms of the GNU General Public License as published by
	 * the Free Software Foundation, either version 3 of the License, or
	 * (at your option) any later version.
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU General Public License for more details.
	 *
	 * You should have received a copy of the GNU General Public License
	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
	 */
	${5}
snippet lgpl
	/* ${1:`expand('%:t')`}
	 *
	 * Copyright (C) ${2:`system('date +%Y')`} ${3:`system('git config user.name')`} <${4:`system('git config user.email')`}>
	 *
	 * This file is free software; you can redistribute it and/or modify it under
	 * the terms of the GNU Lesser General Public License as published by the Free
	 * Software Foundation; either version 3 of the License, or (at your option)
	 * any later version.
	 *
	 * This file is distributed in the hope that it will be useful, but WITHOUT
	 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
	 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
	 * License for more details.
	 *
	 * You should have received a copy of the GNU General Public License along
	 * with this program.  If not, see <http://www.gnu.org/licenses/>.
	 */
	${5}
snippet agpl
	/* ${1:`expand('%:t')`}
	 *
	 * Copyright (C) ${2:`system('date +%Y')`} ${3:`system('git config user.name')`} <${4:`system('git config user.email')`}>
	 *
	 * This program is free software: you can redistribute it and/or modify
	 * it under the terms of the GNU Affero General Public License as
	 * published by the Free Software Foundation, either version 3 of the
	 * License, or (at your option) any later version.
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU Affero General Public License for more details.
	 *
	 * You should have received a copy of the GNU Affero General Public License
	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
	 */
	${5}
snippet inside
	#if !defined (${1:`NS_NAME("$1")`}_INSIDE) && !defined ($1_COMPILATION)
	#error "Only <${2:`_ns_name("$1")`}/$2.h> can be included directly."
	#endif
	${3}
snippet once
	static gsize initialized = FALSE;

	if (g_once_init_enter(&initialized)) {
		${1}
		g_once_init_leave(&initialized, TRUE);
	}
	${2}
snippet window
	g_object_new(GTK_TYPE_WINDOW,
	             "default-height", ${1:480},
	             "default-width", ${2:640},
	             "title", _("${3:Window Title}"),
	             NULL);${4}
snippet button
	g_object_new(GTK_TYPE_BUTTON,
	             "visible", TRUE,
	             "stock-id", ${1:GTK_STOCK_ADD},
	             NULL);${2}
snippet label
	g_object_new(GTK_TYPE_LABEL,
	             "label", _("${1:XXX}"),
	             "use-markup", ${2:TRUE},
	             "visible", TRUE,
	             "xalign", ${3:0.5f},
	             NULL);${4}
snippet hbox
	g_object_new(GTK_TYPE_HBOX,
	             "visible", TRUE,
	             NULL);${1}
snippet vbox
	g_object_new(GTK_TYPE_VBOX,
	             "visible", TRUE,
	             NULL);${1}
snippet add
	gtk_container_add(GTK_CONTAINER(${1:parent}), ${2:child});${3}
snippet addp
	gtk_container_add_with_properties(GTK_CONTAINER(${1:parent}), ${2:child},
	                                  "${3:expand}", ${4:FALSE},
	                                  NULL);${5}
snippet scroller
	g_object_new(GTK_TYPE_SCROLLED_WINDOW,
	             "visible", TRUE,
	             NULL);
snippet gtkmain
	#include <stdlib.h>
	#include <glib.h>
	#include <glib/gi18n.h>
	#include <gtk/gtk.h>

	static GOptionEntry options[] = {
		{ NULL }
	};

	gint
	main (gint   argc,
	      gchar *argv[])
	{
		GOptionContext *context;
		GError *error = NULL;

		/* initialize i18n */
		textdomain(GETTEXT_PACKAGE);
		bindtextdomain(GETTEXT_PACKAGE, LOCALE_DIR);
		bind_textdomain_codeset(GETTEXT_PACKAGE, "UTF-8");
		g_set_application_name(_("${1:AppName}"));

		/* initialize threading early */
		g_thread_init(NULL);

		/* parse command line arguments */
		context = g_option_context_new(_("- $1"));
		g_option_context_add_main_entries(context, options, GETTEXT_PACKAGE);
		g_option_context_add_group(context, gtk_get_option_group(FALSE));
		if (!g_option_context_parse(context, &argc, &argv, &error)) {
			g_printerr("%s\n", error->message);
			g_error_free(error);
			return EXIT_FAILURE;
		}

		${2}

		return EXIT_SUCCESS;
	}
snippet glibmain
	#include <stdlib.h>
	#include <glib.h>
	#include <glib/gi18n.h>

	static GOptionEntry options[] = {
		{ NULL }
	};

	gint
	main (gint   argc,
	      gchar *argv[])
	{
		GOptionContext *context;
		GError *error = NULL;

		/* initialize i18n */
		textdomain(GETTEXT_PACKAGE);
		bindtextdomain(GETTEXT_PACKAGE, LOCALE_DIR);
		bind_textdomain_codeset(GETTEXT_PACKAGE, "UTF-8");
		g_set_application_name(_("${1:AppName}"));

		/* parse command line arguments */
		context = g_option_context_new(_("- $1"));
		g_option_context_add_main_entries(context, options, GETTEXT_PACKAGE);
		if (!g_option_context_parse(context, &argc, &argv, &error)) {
			g_printerr("%s\n", error->message);
			g_error_free(error);
			return EXIT_FAILURE;
		}

		/* Initialize libraries */
		g_thread_init(NULL);
		g_type_init();

		${2}

		return EXIT_SUCCESS;
	}
snippet stra
	/**
	 * `FuncPrefix()`_get_${1:name}:
	 * @`InstanceName()`: (in): A #`ClassName()`.
	 *
	 * Gets the "${2:name}" property.
	 *
	 * Returns: A string which should not be modified or freed.
	 */
	const gchar *
	`FuncPrefix()`_get_$1 (`ClassName()` *`InstanceName()`)
	{
		g_return_val_if_fail(`NS_NAME()`_IS_`TYPE_NAME("$1")`(`InstanceName()`), NULL);
		return `InstanceName()`->priv->$1;
	}

	/**
	 * `FuncPrefix()`_set_$1:
	 * @`InstanceName()`: (in): A #`ClassName()`.
	 * @$1: (in): A string.
	 *
	 * Sets the "$2" property.
	 */
	void
	`FuncPrefix()`_set_$1 (`ClassName()` *`InstanceName()`,
	`FuncSpace("_set_")` `FuncSpace($1)` const gchar *$1)
	{
		g_return_if_fail(`NS_NAME()`_IS_`TYPE_NAME("$1")`(`InstanceName()`));
		g_free(`InstanceName()`->priv->$1);
		`InstanceName()`->priv->$1 = g_strdup($1);
		g_object_notify_by_pspec(G_OBJECT(`InstanceName()`), properties[PROP_${3:NAME}]);
	}
	${4}
snippet setprop
	static void
	`FuncPrefix()`_set_property (GObject      *object,
	`FuncSpace("get_property")`  guint         prop_id,
	`FuncSpace("get_property")`  const GValue *value,
	`FuncSpace("get_property")`  GParamSpec   *pspec)
	{
		`ClassName()` *self = `CLASS_NAME()` (object);

		switch (prop_id)
			{
			default:
				G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
			}
	}
snippet getprop
	static void
	`FuncPrefix()`_get_property (GObject    *object,
	`FuncSpace("get_property")`  guint       prop_id,
	`FuncSpace("get_property")`  GValue     *value,
	`FuncSpace("get_property")`  GParamSpec *pspec)
	{
		`ClassName()` *self = `CLASS_NAME()` (object);

		switch (prop_id)
			{
			default:
				G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
			}
	}
snippet props
	object_class->get_property = `FuncPrefix()`_get_property;
	object_class->set_property = `FuncPrefix()`_set_property;${1}
snippet dispose
	static void
	${1:`FuncPrefix("$1")`}_dispose (GObject *object)
	{
		G_OBJECT_CLASS ($1_parent_class)->dispose (object);
	}
snippet quark
	/**
	 * $1_error_quark:
	 *
	 * Retrieves the "$2" error #GQuark.
	 *
	 * Returns: A #GQuark.
	 */
	GQuark
	${1:`FuncPrefix("$1")`}_error_quark (void)
	{
		return g_quark_from_static_string("${2:`Filename("$1")`}-error-quark");
	}
snippet hquark
	GQuark ${1:example_object}_error_quark (void) G_GNUC_CONST;
snippet hobj
	#ifndef ${1:`NS_NAME("$1")`}_${2:`TYPE_NAME("$1")`}_H
	#define $1_$2_H

	#include <${6:glib-object.h}>

	G_BEGIN_DECLS

	#define $1_TYPE_$2            (${3:`FuncPrefix("$1")`}_get_type())
	#define $1_$2(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), $1_TYPE_$2, $4))
	#define $1_$2_CONST(obj)      (G_TYPE_CHECK_INSTANCE_CAST ((obj), $1_TYPE_$2, $4 const))
	#define $1_$2_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass),  $1_TYPE_$2, $4Class))
	#define $1_IS_$2(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), $1_TYPE_$2))
	#define $1_IS_$2_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  $1_TYPE_$2))
	#define $1_$2_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  $1_TYPE_$2, $4Class))

	typedef struct _$4        $4;
	typedef struct _$4Class   $4Class;
	typedef struct _$4Private $4Private;

	struct _${4:`ClassName("$1")`}
	{
		${5:GObject} parent;

		/*< private >*/
		$4Private *priv;
	};

	struct _$4Class
	{
		$5Class parent_class;
	};

	GType $3_get_type (void) G_GNUC_CONST;

	G_END_DECLS

	#endif /* $1_$2_H */
snippet vhobj
	#ifndef ${1:`NS_NAME("$1")`}_${2:`TYPE_NAME("$1")`}_H
	#define $1_$2_H


	#include <glib-object.h>


	G_BEGIN_DECLS


	#define $1_TYPE_$2            (${3:`FuncPrefix("$1")`}_get_type())
	#define $1_$2(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), $1_TYPE_$2, $4))
	#define $1_$2_CONST(obj)      (G_TYPE_CHECK_INSTANCE_CAST ((obj), $1_TYPE_$2, $4 const))
	#define $1_$2_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass),  $1_TYPE_$2, $4Class))
	#define $1_IS_$2(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), $1_TYPE_$2))
	#define $1_IS_$2_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass),  $1_TYPE_$2))
	#define $1_$2_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj),  $1_TYPE_$2, $4Class))


	typedef struct _$4        $4;
	typedef struct _$4Class   $4Class;
	typedef struct _$4Private $4Private;


	struct _${4:`ClassName("$1")`}
	{
		${5:GObject} parent;

		/*< private >*/
		$4Private *priv;
	};


	struct _$4Class
	{
		$5Class parent_class;
	};


	GType $3_get_type (void) G_GNUC_CONST;
	${6}

	G_END_DECLS


	#endif /* $1_$2_H */
snippet vcobj
	#include "${1:`HeaderName("$1")`}"


	G_DEFINE_TYPE(${2:`ClassName("$1")`}, ${3:`FuncPrefix("$1")`}, ${4:G_TYPE_OBJECT})


	struct _$2Private
	{
		gpointer dummy;
	};


	/*
	 *--------------------------------------------------------------------------
	 *
	 * $3_finalize --
	 *
	 *       Finalizer for #$2 instance.  Frees any resources held by
	 *       the instance.
	 *
	 * Returns:
	 *       None.
	 *
	 * Side effects:
	 *       None.
	 *
	 *--------------------------------------------------------------------------
	 */

	static void
	$3_finalize(GObject *object) /* IN */
	{
		G_OBJECT_CLASS($3_parent_class)->finalize(object);
	}


	/*
	 *--------------------------------------------------------------------------
	 *
	 * $3_class_init --
	 *
	 *       Initializes the #$2Class and prepares the vtable.
	 *
	 * Returns:
	 *       None.
	 *
	 * Side effects:
	 *       None.
	 *
	 *--------------------------------------------------------------------------
	 */

	static void
	$3_class_init($2Class *klass) /* IN */
	{
		GObjectClass *object_class;

		object_class = G_OBJECT_CLASS(klass);
		object_class->finalize = $3_finalize;
		g_type_class_add_private(object_class, sizeof($2Private));
	}


	/*
	 *--------------------------------------------------------------------------
	 *
	 * $3_init --
	 *
	 *       Initializes the #$2 instance.
	 *
	 * Returns:
	 *       None.
	 *
	 * Side effects:
	 *       None.
	 *
	 *--------------------------------------------------------------------------
	 */

	static void
	$3_init($2 *${7:`InstanceName("$1")`}) /* IN */
	{
		$7->priv =
			G_TYPE_INSTANCE_GET_PRIVATE($7,
			                            ${5:`NS_NAME("$1")`}_TYPE_${6:`TYPE_NAME("$1")`},
			                            $2Private);
	}
snippet cobj
	#include <glib/gi18n.h>

	#include "${1:`HeaderName("$1")`}"

	typedef struct
	{
		gpointer dummy;
	} _$2Private;

	enum
	{
		PROP_0,
		N_PROPS
	};

	G_DEFINE_TYPE_WITH_PRIVATE (${2:`ClassName()`}, ${3:`FuncPrefix()`}, ${4:G_TYPE_OBJECT})

	static GParamSpec *properties [N_PROPS];

	static void
	$3_finalize (GObject *object)
	{
		$2Private *priv;

		priv = `NS_NAME()`_`TYPE_NAME()` (object)->priv;

		G_OBJECT_CLASS ($3_parent_class)->finalize (object);
	}

	static void
	`FuncPrefix()`_get_property (GObject    *object,
	`FuncSpace("get_property")`  guint       prop_id,
	`FuncSpace("get_property")`  GValue     *value,
	`FuncSpace("get_property")`  GParamSpec *pspec)
	{
		`ClassName()` *self = `CLASS_NAME()` (object);

		switch (prop_id)
			{
			default:
				G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
			}
	}

	static void
	`FuncPrefix()`_set_property (GObject      *object,
	`FuncSpace("get_property")`  guint         prop_id,
	`FuncSpace("get_property")`  const GValue *value,
	`FuncSpace("get_property")`  GParamSpec   *pspec)
	{
		`ClassName()` *self = `CLASS_NAME()` (object);

		switch (prop_id)
			{
			default:
				G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
			}
	}

	static void
	$3_class_init ($2Class *klass)
	{
		GObjectClass *object_class = G_OBJECT_CLASS (klass);

		object_class->finalize = $3_finalize;
		object_class->get_property = `FuncPrefix()`_get_property;
		object_class->set_property = `FuncPrefix()`_set_property;
	}

	static void
	$3_init ($2 *${5:self})
	{
	}
snippet config
	#ifdef HAVE_CONFIG_H
	#include "config.h"
	#endif
snippet iface
	#include "${1:`HeaderName("$1")`}"

	GType
	${2:`FuncPrefix("$1")`}_get_type (void)
	{
		static GType type_id = 0;

		if (g_once_init_enter((gsize *)&type_id)) {
			GType _type_id;
			const GTypeInfo g_type_info = {
				sizeof(${3:`ClassName("$1")`}Iface),
				NULL, /* base_init */
				NULL, /* base_finalize */
				NULL, /* class_init */
				NULL, /* class_finalize */
				NULL, /* class_data */
				0,    /* instance_size */
				0,    /* n_preallocs */
				NULL, /* instance_init */
				NULL  /* value_vtable */
			};

			_type_id = g_type_register_static(G_TYPE_INTERFACE,
			                                  "$3",
			                                  &g_type_info,
			                                  0);
			g_type_interface_add_prerequisite(_type_id, G_TYPE_OBJECT);
			g_once_init_leave((gsize *)&type_id, _type_id);
		}

		return type_id;
	}
snippet hiface
	#ifndef $1_$2_H
	#define $1_$2_H

	#include <glib-object.h>

	G_BEGIN_DECLS

	#define ${1:`NS_NAME("$1")`}_TYPE_${2:`TYPE_NAME("$1")`}             (${3:`FuncPrefix("$1")`}_get_type())
	#define $1_$2(o)               (G_TYPE_CHECK_INSTANCE_CAST((o),    $1_TYPE_$2, $4))
	#define $1_IS_$2(o)            (G_TYPE_CHECK_INSTANCE_TYPE((o),    $1_TYPE_$2))
	#define $1_$2_GET_INTERFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE((o), $1_TYPE_$2, $4Iface))

	typedef struct _$4 ${4:`ClassName("$1")`};
	typedef struct _$4Iface $4Iface;

	struct _$4Iface
	{
		GTypeInterface parent;

		${5:/* interface methods */}
	};

	GType $3_get_type (void) G_GNUC_CONST;
	${6}

	G_END_DECLS

	#endif /* $1_$2_H */
snippet forlist
	for (${1:iter} = ${2:list}; $1; $1 = $1->next) {
		${3}
	}
snippet prepend
	$1 = g_list_prepend(${1:list}, ${2:data});${3}
snippet append
	$1 = g_list_append(${1:list}, ${2:data});${3}
snippet method
	${1:static void}
	${2:`FuncPrefix("$1")`}_${3:func_name} (${4:`ClassName("$1")`} *self) ${7}
	{
		$4Private *priv = $2_get_instance_private (self);

		g_return_if_fail (`NS_NAME("$1")`_IS_`TYPE_NAME("$1")` (self));
	}
snippet fail
	g_return_if_fail (${1:`NS_NAME("$1")`_IS_`TYPE_NAME("$1")` (self)});${2}
snippet vfail
	g_return_val_if_fail (${1:`NS_NAME("$1")`_IS_`TYPE_NAME("$1")` (self)}, ${2:NULL});${3}
snippet gd
	gdouble 
snippet bo
	gboolean 
snippet gb
	gboolean 
snippet E
	ENTRY;${1}
snippet EX
	EXIT;${1}
snippet RE
	RETURN(${1:ret});${2}
snippet GSt
	GStaticRWLock ${1}rw_lock;${2}
snippet rlock
	g_static_rw_lock_reader_lock(&${1:priv}->rw_lock);${2}
snippet runlock
	g_static_rw_lock_reader_unlock(&${1:priv}->rw_lock);${2}
snippet wlock
	g_static_rw_lock_writer_lock(&${1:priv}->rw_lock);${2}
snippet wunlock
	g_static_rw_lock_writer_unlock(&${1:priv}->rw_lock);${2}
snippet guard
	#ifndef ${1:`CLASS_NAME("$1")`}_H
	#define $1_H

	#include <glib.h>

	G_BEGIN_DECLS

	${2}

	G_END_DECLS

	#endif /* $1_H */
snippet C
	`ClassName("$1")` 
snippet c
	*`InstanceName("$1")`
snippet I
	/* IN */
snippet IN
	/* IN */
snippet O
	/* OUT */
snippet OUT
	/* OUT */
snippet Pr
	`ClassName("$1")`Private *priv = `FuncPrefix("$1")`_get_instance_private (self);
snippet pr
	`ClassName("$1")`Private *priv = `FuncPrefix("$1")`_get_instance_private (self);
snippet strd
	g_strdup(${1});${2}
snippet str
	g_strdup(${1});${2}
snippet prop
	properties [PROP_${1:NAME}] =
		g_param_spec_${2:object} ("${3:name}",
		                     "${4:Name}",
		                     "${5:Name}",
		                     ${6}
		                     (G_PARAM_${7:READWRITE} |
		                      G_PARAM_STATIC_STRINGS));

	g_object_class_install_properties (object_class, N_PROPS, properties);
snippet f
	`FuncPrefix("$1")`_
snippet i
	gint 
snippet w
	GtkWidget *
snippet gp
	gpointer 
snippet GE
	GError *error = NULL;
snippet unref
	g_object_unref(${1:`InstanceName("$1")`});${2}
snippet ref
	g_object_ref(${1:`InstanceName("$1")`});${2}
snippet co
	/*
	 * ${1:XXX}
	 */${2}
snippet CC
	`CLASS_NAME("$1")`(
snippet h
	`ClassName("$1")`Private *priv;

	g_return_if_fail(`NS_NAME("$1")`_IS_`TYPE_NAME("$1")`(`InstanceName("$1")`));

	priv = `InstanceName("$1")`->priv;

snippet iter
	for (iter = list; iter; iter = iter->next) {
		$1
	}
snippet adoc
	/**
	 * `FuncPrefix("$1")`_${1:func_name}_async:
	 * @self: a #`ClassName("$1")`
	 * @cancellable: (nullable): an optional #GCancellable, or %NULL
	 * @callback: (scope async) (closure user_data): a callback to execute upon completion
	 * @user_data: the data to pass to @callback function
	 *
	 * ${2}
	 */
snippet fdoc
	/**
	 * `FuncPrefix("$1")`_${1:func_name}_finish:
	 * @self: a #`ClassName("$1")`
	 * @result: the #GAsyncResult provided to the callback function
	 * @error: a location for a #GError, or %NULL
	 *
	 * Completes an asynchronous request to `FuncPrefix("$1")`_$1_async().
	 *
	 * Returns: ${2:(transfer full): }$0
	 */
